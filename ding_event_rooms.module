<?php
/**
 * @file
 * Code for the Ding Event Rooms feature.
 */

include_once 'ding_event_rooms.features.inc';

/**
 * Implements hook_post_features_revert().
 */
function ding_event_rooms_post_features_revert($component) {
  // Every time field instance of this module will be reverted,
  // place the field into correct field group.
  if ('field_instance' !== $component) {
    return;
  }

  // Positioning field to event node form's tagging group.
  $groups = field_group_read_groups(
    array(
      'entity_type' => 'node',
      'bundle' => 'ding_event',
      'mode' => 'form'
    )
  );

  $group_content = $groups['node']['ding_event']['form']['group_ding_event_date_loc_price'];
  $group_content->children[] = 'field_ding_event_rooms';
  field_group_group_save($group_content);

  // Positioning field to left group of default display of event node.
  $display_groups = field_group_read_groups(
    array(
      'entity_type' => 'node',
      'bundle' => 'ding_event',
      'mode' => 'default',
    )
  );

  // Insert the field into the target group. This doesn't care about the
  // order within the group, yet.
  $group_content = $display_groups['node']['ding_event']['default']['group_left'];
  if (!in_array('field_ding_event_rooms', $group_content->children)) {
    $group_content->children[] = 'field_ding_event_rooms';
    field_group_group_save($group_content);
  }

  // Set the correct display order. We want it to be below Library field.
  // This forces us to update all fields weight that are part of this group.
  $field_instances = field_info_instances('node', 'ding_event');
  $library_field_weight = $field_instances['og_group_ref']['display']['default']['weight'];
  $weight_counter = 2;
  foreach (array_keys($field_instances) as $field_name) {
    // Skip fields that are not part of the group.
    if (!in_array($field_name, $group_content->children)) {
      continue;
    }

    $default_display_field = &$field_instances[$field_name]['display']['default'];

    switch ($field_name) {
      case 'og_group_ref':
        continue(2);
      case 'field_ding_event_rooms':
        $default_display_field['weight'] = $library_field_weight + 1;
        break;
      default:
        // Skip fields that are above the library field.
        if ($default_display_field['weight'] < $library_field_weight) {
          continue(2);
        }
        $default_display_field['weight'] = $library_field_weight + $weight_counter++;
    }

    field_update_instance($field_instances[$field_name]);
  }

  // Because of pushing out of ding_event_rooms field from ding_event's tagging
  // field group, set a random value in variable exported into this module in
  // order to have this feature permanently overridden so we can revert this feature.
  variable_set('ding_event_rooms_random', rand());
}

/**
 * Implements hook_theme_registry_alter().
 */
function ding_event_rooms_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $path = drupal_get_path('module', 'ding_event_rooms');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}
